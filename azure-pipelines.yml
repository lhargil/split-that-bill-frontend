# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none
pool:
  vmImage: ubuntu-18.04
jobs:
- job: buildMaster
  condition: eq(variables['Build.SourceBranchName'], 'master')
  variables:
    - group: PROD
  steps:
  - script: |
      echo 'building master'
      echo ${{variables.group}}
      echo ${{variables['Build.SourceBranchName']}}
      echo $(SPLIT_THAT_BILL_BASEURL)
      echo $(SPLIT_THAT_BILL_SITEURL)
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: 'install Node.js'
  - script: |
      npm install -g @angular/cli
      npm install
    displayName: 'install'
  # - script: |
  #     npm run coverage
  #   displayName: 'run coverage'
  - script: |
      npm run prerender
    displayName: 'prerender app'
  # - script: |
  #     npm run build:prod
  #   displayName: 'build production'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/dist/splitthatbill/browser'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/published_client/$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/published_client'
      ArtifactName: 'drop'
      publishLocation: 'Container'
- job: buildFeature
  condition: ne(variables['Build.SourceBranchName'], 'master')
  variables:
    - group: DEV
  steps:
  - script: |
      echo 'building feature'
      echo ${{variables.group}}
      echo ${{variables['Build.SourceBranchName']}}
      echo $(SPLIT_THAT_BILL_BASEURL)
      echo $(SPLIT_THAT_BILL_SITEURL)
    displayName: 'check variables'
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: 'install Node.js'
  - script: |
      npm install -g @angular/cli
      npm install
    displayName: 'install'
  # - script: |
  #     npm run coverage
  #   displayName: 'run coverage'
  - script: |
      npm run prerender
    displayName: 'prerender app'
  # - script: |
  #     npm run build:prod
  #   displayName: 'build production'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/dist/splitthatbill/browser'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/published_client/$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/published_client'
      ArtifactName: 'drop'
      publishLocation: 'Container'
